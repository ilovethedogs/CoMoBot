
can_echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f8  080033f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003400  08003400  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003414  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003414  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a368  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001811  00000000  00000000  0002a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020706  00000000  00000000  0002cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b62  00000000  00000000  0004d226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b79  00000000  00000000  00056d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002040  00000000  00000000  0011d954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800338c 	.word	0x0800338c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800338c 	.word	0x0800338c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb6b 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f81f 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f923 	bl	8000760 <MX_GPIO_Init>
  MX_CAN1_Init();
 800051a:	f000 f887 	bl	800062c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8f5 	bl	800070c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t outer[6] = {79, 85, 84, 13, 10, 0};
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <main+0x44>)
 8000524:	463b      	mov	r3, r7
 8000526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052a:	6018      	str	r0, [r3, #0]
 800052c:	3304      	adds	r3, #4
 800052e:	8019      	strh	r1, [r3, #0]
  while (1)
  {
	  CanSendMssg();
 8000530:	f000 f94c 	bl	80007cc <CanSendMssg>
	  //CanRecvMssg();
	  HAL_UART_Transmit(&huart2, outer, 6, 10);
 8000534:	4639      	mov	r1, r7
 8000536:	230a      	movs	r3, #10
 8000538:	2206      	movs	r2, #6
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x48>)
 800053c:	f002 fb85 	bl	8002c4a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fbc2 	bl	8000ccc <HAL_Delay>
	  CanSendMssg();
 8000548:	e7f2      	b.n	8000530 <main+0x28>
 800054a:	bf00      	nop
 800054c:	080033a4 	.word	0x080033a4
 8000550:	20000050 	.word	0x20000050

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 ff0a 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xd4>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c8:	23a8      	movs	r3, #168	; 0xa8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 f849 	bl	8002674 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 f9b6 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fce8 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000616:	f000 f99f 	bl	8000958 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000632:	4a34      	ldr	r2, [pc, #208]	; (8000704 <MX_CAN1_Init+0xd8>)
 8000634:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000638:	2215      	movs	r2, #21
 800063a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800063c:	4b30      	ldr	r3, [pc, #192]	; (8000700 <MX_CAN1_Init+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_CAN1_Init+0xd4>)
 800064a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800064e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000652:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000656:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_CAN1_Init+0xd4>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000660:	2200      	movs	r2, #0
 8000662:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000666:	2200      	movs	r2, #0
 8000668:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_CAN1_Init+0xd4>)
 800066c:	2201      	movs	r2, #1
 800066e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000672:	2200      	movs	r2, #0
 8000674:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_CAN1_Init+0xd4>)
 8000678:	2200      	movs	r2, #0
 800067a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800067c:	4820      	ldr	r0, [pc, #128]	; (8000700 <MX_CAN1_Init+0xd4>)
 800067e:	f000 fb49 	bl	8000d14 <HAL_CAN_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000688:	f000 f966 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_CAN1_Init+0xdc>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_CAN1_Init+0xdc>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_CAN1_Init+0xdc>)
 800069a:	2201      	movs	r2, #1
 800069c:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006be:	2201      	movs	r2, #1
 80006c0:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006c4:	220e      	movs	r2, #14
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80006c8:	490f      	ldr	r1, [pc, #60]	; (8000708 <MX_CAN1_Init+0xdc>)
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_CAN1_Init+0xd4>)
 80006cc:	f000 fc1e 	bl	8000f0c <HAL_CAN_ConfigFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_CAN1_Init+0xae>
  {
    /* Filter configuration Error */
    Error_Handler();
 80006d6:	f000 f93f 	bl	8000958 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_CAN1_Init+0xd4>)
 80006dc:	f000 fcf6 	bl	80010cc <HAL_CAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_CAN1_Init+0xbe>
  {
    /* Start Error */
    Error_Handler();
 80006e6:	f000 f937 	bl	8000958 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80006ea:	2102      	movs	r1, #2
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_CAN1_Init+0xd4>)
 80006ee:	f000 ff7b 	bl	80015e8 <HAL_CAN_ActivateNotification>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_CAN1_Init+0xd0>
  {
    /* Notification Error */
    Error_Handler();
 80006f8:	f000 f92e 	bl	8000958 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028
 8000704:	40006400 	.word	0x40006400
 8000708:	200000dc 	.word	0x200000dc

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f002 fa34 	bl	8002bb0 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f903 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000050 	.word	0x20000050
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_GPIO_Init+0x68>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_GPIO_Init+0x68>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_GPIO_Init+0x68>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x68>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_GPIO_Init+0x68>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_GPIO_Init+0x68>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <MX_GPIO_Init+0x68>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <CanSendMssg>:

/* USER CODE BEGIN 4 */
void CanSendMssg(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
	  TxHeader.StdId = 0x11;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <CanSendMssg+0xb0>)
 80007d4:	2211      	movs	r2, #17
 80007d6:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = CAN_RTR_DATA;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <CanSendMssg+0xb0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE = CAN_ID_STD;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <CanSendMssg+0xb0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC = 2;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <CanSendMssg+0xb0>)
 80007e6:	2202      	movs	r2, #2
 80007e8:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <CanSendMssg+0xb0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	751a      	strb	r2, [r3, #20]
	  TxData[0] = 0xCA;
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <CanSendMssg+0xb4>)
 80007f2:	22ca      	movs	r2, #202	; 0xca
 80007f4:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0xFE;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <CanSendMssg+0xb4>)
 80007f8:	22fe      	movs	r2, #254	; 0xfe
 80007fa:	705a      	strb	r2, [r3, #1]

	  uint8_t trysend[10] = {84, 82, 89, 83, 69, 78, 68, 13, 10, 0};
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <CanSendMssg+0xb8>)
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	ca07      	ldmia	r2, {r0, r1, r2}
 8000804:	c303      	stmia	r3!, {r0, r1}
 8000806:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, trysend, 10, 10);
 8000808:	f107 0114 	add.w	r1, r7, #20
 800080c:	230a      	movs	r3, #10
 800080e:	220a      	movs	r2, #10
 8000810:	481d      	ldr	r0, [pc, #116]	; (8000888 <CanSendMssg+0xbc>)
 8000812:	f002 fa1a 	bl	8002c4a <HAL_UART_Transmit>

	  uint8_t txbox[7] = {84, 88, 66, 88, 13, 10, 0};
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <CanSendMssg+0xc0>)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000820:	6018      	str	r0, [r3, #0]
 8000822:	3304      	adds	r3, #4
 8000824:	8019      	strh	r1, [r3, #0]
 8000826:	3302      	adds	r3, #2
 8000828:	0c0a      	lsrs	r2, r1, #16
 800082a:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 800082c:	4818      	ldr	r0, [pc, #96]	; (8000890 <CanSendMssg+0xc4>)
 800082e:	f000 fd6c 	bl	800130a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d107      	bne.n	8000848 <CanSendMssg+0x7c>
		  HAL_UART_Transmit(&huart2, txbox, 7, 10);
 8000838:	f107 010c 	add.w	r1, r7, #12
 800083c:	230a      	movs	r3, #10
 800083e:	2207      	movs	r2, #7
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <CanSendMssg+0xbc>)
 8000842:	f002 fa02 	bl	8002c4a <HAL_UART_Transmit>
 8000846:	e016      	b.n	8000876 <CanSendMssg+0xaa>
		  return;
	  }

	  uint8_t sendfail[11] = {83, 69, 78, 68, 70, 65, 73, 76, 13, 10, 0};
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <CanSendMssg+0xc8>)
 800084a:	463b      	mov	r3, r7
 800084c:	ca07      	ldmia	r2, {r0, r1, r2}
 800084e:	c303      	stmia	r3!, {r0, r1}
 8000850:	801a      	strh	r2, [r3, #0]
 8000852:	3302      	adds	r3, #2
 8000854:	0c12      	lsrs	r2, r2, #16
 8000856:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <CanSendMssg+0xcc>)
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <CanSendMssg+0xb4>)
 800085c:	4907      	ldr	r1, [pc, #28]	; (800087c <CanSendMssg+0xb0>)
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <CanSendMssg+0xc4>)
 8000860:	f000 fc78 	bl	8001154 <HAL_CAN_AddTxMessage>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d005      	beq.n	8000876 <CanSendMssg+0xaa>
	  {
	    /* Transmission request Error */
		HAL_UART_Transmit(&huart2, sendfail, 11, 10);
 800086a:	4639      	mov	r1, r7
 800086c:	230a      	movs	r3, #10
 800086e:	220b      	movs	r2, #11
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <CanSendMssg+0xbc>)
 8000872:	f002 f9ea 	bl	8002c4a <HAL_UART_Transmit>
	  }

	  //return HAL_OK; /* Test Passed */
}
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000094 	.word	0x20000094
 8000880:	200000c8 	.word	0x200000c8
 8000884:	080033ac 	.word	0x080033ac
 8000888:	20000050 	.word	0x20000050
 800088c:	080033b8 	.word	0x080033b8
 8000890:	20000028 	.word	0x20000028
 8000894:	080033c0 	.word	0x080033c0
 8000898:	200000d8 	.word	0x200000d8

0800089c <CanRecvMssg>:

void CanRecvMssg(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
	uint8_t aa[7] = {70, 70, 70, 70, 13, 10, 0};
 80008a2:	4a22      	ldr	r2, [pc, #136]	; (800092c <CanRecvMssg+0x90>)
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ac:	6018      	str	r0, [r3, #0]
 80008ae:	3304      	adds	r3, #4
 80008b0:	8019      	strh	r1, [r3, #0]
 80008b2:	3302      	adds	r3, #2
 80008b4:	0c0a      	lsrs	r2, r1, #16
 80008b6:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0)
 80008b8:	2100      	movs	r1, #0
 80008ba:	481d      	ldr	r0, [pc, #116]	; (8000930 <CanRecvMssg+0x94>)
 80008bc:	f000 fe6c 	bl	8001598 <HAL_CAN_GetRxFifoFillLevel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d106      	bne.n	80008d4 <CanRecvMssg+0x38>
	{
		HAL_UART_Transmit(&huart2, aa, 7, 10);
 80008c6:	f107 0110 	add.w	r1, r7, #16
 80008ca:	230a      	movs	r3, #10
 80008cc:	2207      	movs	r2, #7
 80008ce:	4819      	ldr	r0, [pc, #100]	; (8000934 <CanRecvMssg+0x98>)
 80008d0:	f002 f9bb 	bl	8002c4a <HAL_UART_Transmit>
	}

	uint8_t recvfail[11] = {82, 69, 67, 86, 70, 65, 73, 76, 13, 10, 0};
 80008d4:	4a18      	ldr	r2, [pc, #96]	; (8000938 <CanRecvMssg+0x9c>)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008da:	c303      	stmia	r3!, {r0, r1}
 80008dc:	801a      	strh	r2, [r3, #0]
 80008de:	3302      	adds	r3, #2
 80008e0:	0c12      	lsrs	r2, r2, #16
 80008e2:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <CanRecvMssg+0xa0>)
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <CanRecvMssg+0xa4>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <CanRecvMssg+0x94>)
 80008ec:	f000 fd42 	bl	8001374 <HAL_CAN_GetRxMessage>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <CanRecvMssg+0x66>
	{
	    /* Reception Error */
		HAL_UART_Transmit(&huart2, recvfail, 11, 10);
 80008f6:	1d39      	adds	r1, r7, #4
 80008f8:	230a      	movs	r3, #10
 80008fa:	220b      	movs	r2, #11
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <CanRecvMssg+0x98>)
 80008fe:	f002 f9a4 	bl	8002c4a <HAL_UART_Transmit>
	}

	if((RxHeader.StdId != 0x11)                     ||
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <CanRecvMssg+0xa4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b11      	cmp	r3, #17
 8000908:	d106      	bne.n	8000918 <CanRecvMssg+0x7c>
	   (RxHeader.RTR != CAN_RTR_DATA)               ||
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <CanRecvMssg+0xa4>)
 800090c:	68db      	ldr	r3, [r3, #12]
	if((RxHeader.StdId != 0x11)                     ||
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <CanRecvMssg+0x7c>
	   (RxHeader.IDE != CAN_ID_STD)                 ||
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <CanRecvMssg+0xa4>)
 8000914:	689b      	ldr	r3, [r3, #8]
	   (RxHeader.RTR != CAN_RTR_DATA)               ||
 8000916:	2b00      	cmp	r3, #0
	{
	    /* Rx message Error */
		//return HAL_ERROR;
	}

	HAL_UART_Transmit(&huart2, RxData, 2, 10);
 8000918:	230a      	movs	r3, #10
 800091a:	2202      	movs	r2, #2
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <CanRecvMssg+0xa0>)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <CanRecvMssg+0x98>)
 8000920:	f002 f993 	bl	8002c4a <HAL_UART_Transmit>

	//return HAL_OK; /* Test Passed */
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	080033cc 	.word	0x080033cc
 8000930:	20000028 	.word	0x20000028
 8000934:	20000050 	.word	0x20000050
 8000938:	080033d4 	.word	0x080033d4
 800093c:	200000d0 	.word	0x200000d0
 8000940:	200000ac 	.word	0x200000ac

08000944 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	CanRecvMssg();
 800094c:	f7ff ffa6 	bl	800089c <CanRecvMssg>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <HAL_CAN_MspInit+0xa4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d13c      	bne.n	8000a50 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <HAL_CAN_MspInit+0xa8>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <HAL_CAN_MspInit+0xa8>)
 80009e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <HAL_CAN_MspInit+0xa8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_CAN_MspInit+0xa8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <HAL_CAN_MspInit+0xa8>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_CAN_MspInit+0xa8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a20:	2309      	movs	r3, #9
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <HAL_CAN_MspInit+0xac>)
 8000a2c:	f001 f944 	bl	8001cb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2013      	movs	r0, #19
 8000a36:	f001 f908 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a3a:	2013      	movs	r0, #19
 8000a3c:	f001 f921 	bl	8001c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2014      	movs	r0, #20
 8000a46:	f001 f900 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a4a:	2014      	movs	r0, #20
 8000a4c:	f001 f919 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40006400 	.word	0x40006400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12b      	bne.n	8000ade <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_MspInit+0x8c>)
 8000ada:	f001 f8ed 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f8a4 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <CAN1_TX_IRQHandler+0x10>)
 8000b4e:	f000 fd71 	bl	8001634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000028 	.word	0x20000028

08000b5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <CAN1_RX0_IRQHandler+0x10>)
 8000b62:	f000 fd67 	bl	8001634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000028 	.word	0x20000028

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	; (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f002 fbb7 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fc9f 	bl	8000508 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd8:	08003408 	.word	0x08003408
  ldr r2, =_sbss
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be0:	20000108 	.word	0x20000108

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f001 f80f 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fea2 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 f827 	bl	8001c9e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 ffef 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000104 	.word	0x20000104

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e0ed      	b.n	8000f02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fe3e 	bl	80009b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0201 	orr.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d48:	f7ff ffb4 	bl	8000cb4 <HAL_GetTick>
 8000d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4e:	e012      	b.n	8000d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d50:	f7ff ffb0 	bl	8000cb4 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d90b      	bls.n	8000d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e0c5      	b.n	8000f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0e5      	beq.n	8000d50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0202 	bic.w	r2, r2, #2
 8000d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d94:	f7ff ff8e 	bl	8000cb4 <HAL_GetTick>
 8000d98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d9a:	e012      	b.n	8000dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d9c:	f7ff ff8a 	bl	8000cb4 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d90b      	bls.n	8000dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2205      	movs	r2, #5
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e09f      	b.n	8000f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e5      	bne.n	8000d9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7e1b      	ldrb	r3, [r3, #24]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7e5b      	ldrb	r3, [r3, #25]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e9b      	ldrb	r3, [r3, #26]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d108      	bne.n	8000e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0220 	orr.w	r2, r2, #32
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e007      	b.n	8000e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0220 	bic.w	r2, r2, #32
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7edb      	ldrb	r3, [r3, #27]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d108      	bne.n	8000e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0210 	bic.w	r2, r2, #16
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e007      	b.n	8000e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0210 	orr.w	r2, r2, #16
 8000e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7f1b      	ldrb	r3, [r3, #28]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0208 	orr.w	r2, r2, #8
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e007      	b.n	8000ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0208 	bic.w	r2, r2, #8
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7f5b      	ldrb	r3, [r3, #29]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0204 	orr.w	r2, r2, #4
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e007      	b.n	8000ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0204 	bic.w	r2, r2, #4
 8000eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	ea42 0103 	orr.w	r1, r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f22:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d003      	beq.n	8000f32 <HAL_CAN_ConfigFilter+0x26>
 8000f2a:	7cfb      	ldrb	r3, [r7, #19]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	f040 80be 	bne.w	80010ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f32:	4b65      	ldr	r3, [pc, #404]	; (80010c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f34:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	431a      	orrs	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2201      	movs	r2, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	401a      	ands	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d123      	bne.n	8000fdc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3248      	adds	r2, #72	; 0x48
 8000fbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd2:	6979      	ldr	r1, [r7, #20]
 8000fd4:	3348      	adds	r3, #72	; 0x48
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d122      	bne.n	800102a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001004:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3248      	adds	r2, #72	; 0x48
 800100a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800101e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001020:	6979      	ldr	r1, [r7, #20]
 8001022:	3348      	adds	r3, #72	; 0x48
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001044:	e007      	b.n	8001056 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	431a      	orrs	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001070:	e007      	b.n	8001082 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	431a      	orrs	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	431a      	orrs	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010a0:	f023 0201 	bic.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e006      	b.n	80010bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
  }
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40006400 	.word	0x40006400

080010cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d12e      	bne.n	800113e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010f8:	f7ff fddc 	bl	8000cb4 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010fe:	e012      	b.n	8001126 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001100:	f7ff fdd8 	bl	8000cb4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e012      	b.n	800114c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e5      	bne.n	8001100 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e006      	b.n	800114c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
  }
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001168:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d003      	beq.n	8001180 <HAL_CAN_AddTxMessage+0x2c>
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	2b02      	cmp	r3, #2
 800117c:	f040 80b8 	bne.w	80012f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10a      	bne.n	80011a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001190:	2b00      	cmp	r3, #0
 8001192:	d105      	bne.n	80011a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80a0 	beq.w	80012e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	0e1b      	lsrs	r3, r3, #24
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d907      	bls.n	80011c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e09e      	b.n	80012fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011c0:	2201      	movs	r2, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	409a      	lsls	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011dc:	68f9      	ldr	r1, [r7, #12]
 80011de:	6809      	ldr	r1, [r1, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3318      	adds	r3, #24
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	440b      	add	r3, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e00f      	b.n	800120e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001202:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3318      	adds	r3, #24
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	440b      	add	r3, r1
 800120c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3318      	adds	r3, #24
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	3304      	adds	r3, #4
 8001220:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	7d1b      	ldrb	r3, [r3, #20]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d111      	bne.n	800124e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3318      	adds	r3, #24
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	6811      	ldr	r1, [r2, #0]
 800123e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3318      	adds	r3, #24
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	440b      	add	r3, r1
 800124a:	3304      	adds	r3, #4
 800124c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3307      	adds	r3, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	061a      	lsls	r2, r3, #24
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3306      	adds	r3, #6
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3305      	adds	r3, #5
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	4313      	orrs	r3, r2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	3204      	adds	r2, #4
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4610      	mov	r0, r2
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6811      	ldr	r1, [r2, #0]
 8001276:	ea43 0200 	orr.w	r2, r3, r0
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	440b      	add	r3, r1
 8001280:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001284:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3303      	adds	r3, #3
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	061a      	lsls	r2, r3, #24
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3302      	adds	r3, #2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3301      	adds	r3, #1
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4313      	orrs	r3, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	4610      	mov	r0, r2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6811      	ldr	r1, [r2, #0]
 80012ac:	ea43 0200 	orr.w	r2, r3, r0
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	440b      	add	r3, r1
 80012b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3318      	adds	r3, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	6811      	ldr	r1, [r2, #0]
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3318      	adds	r3, #24
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	440b      	add	r3, r1
 80012da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	e00e      	b.n	80012fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e006      	b.n	80012fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d11d      	bne.n	8001366 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001388:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d003      	beq.n	8001398 <HAL_CAN_GetRxMessage+0x24>
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	2b02      	cmp	r3, #2
 8001394:	f040 80f3 	bne.w	800157e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10e      	bne.n	80013bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d116      	bne.n	80013da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0e7      	b.n	800158c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0d8      	b.n	800158c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	331b      	adds	r3, #27
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0204 	and.w	r2, r3, #4
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10c      	bne.n	8001412 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	331b      	adds	r3, #27
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0d5b      	lsrs	r3, r3, #21
 8001408:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e00b      	b.n	800142a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	331b      	adds	r3, #27
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0202 	and.w	r2, r3, #2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	331b      	adds	r3, #27
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	3304      	adds	r3, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 020f 	and.w	r2, r3, #15
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	331b      	adds	r3, #27
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	3304      	adds	r3, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	331b      	adds	r3, #27
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	3304      	adds	r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	b29a      	uxth	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0a1a      	lsrs	r2, r3, #8
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1a      	lsrs	r2, r3, #16
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3302      	adds	r3, #2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0e1a      	lsrs	r2, r3, #24
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3303      	adds	r3, #3
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3304      	adds	r3, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0a1a      	lsrs	r2, r3, #8
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3305      	adds	r3, #5
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0c1a      	lsrs	r2, r3, #16
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3306      	adds	r3, #6
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e1a      	lsrs	r2, r3, #24
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3307      	adds	r3, #7
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d108      	bne.n	800156a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0220 	orr.w	r2, r2, #32
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	e007      	b.n	800157a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e006      	b.n	800158c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
  }
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ac:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d002      	beq.n	80015ba <HAL_CAN_GetRxFifoFillLevel+0x22>
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d10f      	bne.n	80015da <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e005      	b.n	80015da <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d002      	beq.n	8001606 <HAL_CAN_ActivateNotification+0x1e>
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d109      	bne.n	800161a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6959      	ldr	r1, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e006      	b.n	8001628 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
  }
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d07c      	beq.n	8001774 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f983 	bl	80019a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800169c:	e016      	b.n	80016cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	e00c      	b.n	80016cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
 80016c4:	e002      	b.n	80016cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f989 	bl	80019de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f963 	bl	80019b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80016f0:	e016      	b.n	8001720 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	e00c      	b.n	8001720 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
 8001718:	e002      	b.n	8001720 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f969 	bl	80019f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001732:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f943 	bl	80019ca <HAL_CAN_TxMailbox2CompleteCallback>
 8001744:	e016      	b.n	8001774 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	e00c      	b.n	8001774 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	e002      	b.n	8001774 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f949 	bl	8001a06 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f93a 	bl	8001a2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f921 	bl	8001a1a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2210      	movs	r2, #16
 80017fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2208      	movs	r2, #8
 8001816:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f912 	bl	8001a42 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff f884 	bl	8000944 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2210      	movs	r2, #16
 8001856:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f8fc 	bl	8001a56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2208      	movs	r2, #8
 8001878:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8f5 	bl	8001a6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d07b      	beq.n	8001982 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d072      	beq.n	800197a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d043      	beq.n	800197a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d03e      	beq.n	800197a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001902:	2b60      	cmp	r3, #96	; 0x60
 8001904:	d02b      	beq.n	800195e <HAL_CAN_IRQHandler+0x32a>
 8001906:	2b60      	cmp	r3, #96	; 0x60
 8001908:	d82e      	bhi.n	8001968 <HAL_CAN_IRQHandler+0x334>
 800190a:	2b50      	cmp	r3, #80	; 0x50
 800190c:	d022      	beq.n	8001954 <HAL_CAN_IRQHandler+0x320>
 800190e:	2b50      	cmp	r3, #80	; 0x50
 8001910:	d82a      	bhi.n	8001968 <HAL_CAN_IRQHandler+0x334>
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d019      	beq.n	800194a <HAL_CAN_IRQHandler+0x316>
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	d826      	bhi.n	8001968 <HAL_CAN_IRQHandler+0x334>
 800191a:	2b30      	cmp	r3, #48	; 0x30
 800191c:	d010      	beq.n	8001940 <HAL_CAN_IRQHandler+0x30c>
 800191e:	2b30      	cmp	r3, #48	; 0x30
 8001920:	d822      	bhi.n	8001968 <HAL_CAN_IRQHandler+0x334>
 8001922:	2b10      	cmp	r3, #16
 8001924:	d002      	beq.n	800192c <HAL_CAN_IRQHandler+0x2f8>
 8001926:	2b20      	cmp	r3, #32
 8001928:	d005      	beq.n	8001936 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800192a:	e01d      	b.n	8001968 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001934:	e019      	b.n	800196a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193e:	e014      	b.n	800196a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001948:	e00f      	b.n	800196a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001952:	e00a      	b.n	800196a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195c:	e005      	b.n	800196a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001966:	e000      	b.n	800196a <HAL_CAN_IRQHandler+0x336>
            break;
 8001968:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001978:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2204      	movs	r2, #4
 8001980:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f872 	bl	8001a7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e165      	b.n	8001fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8154 	bne.w	8001f9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80ae 	beq.w	8001f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_GPIO_Init+0x300>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a5c      	ldr	r2, [pc, #368]	; (8001fb8 <HAL_GPIO_Init+0x300>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <HAL_GPIO_Init+0x300>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4f      	ldr	r2, [pc, #316]	; (8001fc0 <HAL_GPIO_Init+0x308>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x21a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4e      	ldr	r2, [pc, #312]	; (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x216>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x310>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x212>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_GPIO_Init+0x314>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x20e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <HAL_GPIO_Init+0x318>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x20a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4a      	ldr	r2, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x31c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x206>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a49      	ldr	r2, [pc, #292]	; (8001fd8 <HAL_GPIO_Init+0x320>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x202>
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	e00c      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00a      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee4:	4935      	ldr	r1, [pc, #212]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f16:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f67f ae96 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cc      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90c      	bls.n	800201c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d044      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e067      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4934      	ldr	r1, [pc, #208]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fdf0 	bl	8000cb4 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fdec 	bl	8000cb4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e04f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d20c      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f855 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fd50 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	080033e0 	.word	0x080033e0
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a9b      	lsrs	r3, r3, #10
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	080033f0 	.word	0x080033f0

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021f0:	f7ff ffdc 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0b5b      	lsrs	r3, r3, #13
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	080033f0 	.word	0x080033f0

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	b0ae      	sub	sp, #184	; 0xb8
 800221a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223a:	4bcb      	ldr	r3, [pc, #812]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b0c      	cmp	r3, #12
 8002244:	f200 8206 	bhi.w	8002654 <HAL_RCC_GetSysClockFreq+0x440>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <HAL_RCC_GetSysClockFreq+0x3c>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	08002285 	.word	0x08002285
 8002254:	08002655 	.word	0x08002655
 8002258:	08002655 	.word	0x08002655
 800225c:	08002655 	.word	0x08002655
 8002260:	0800228d 	.word	0x0800228d
 8002264:	08002655 	.word	0x08002655
 8002268:	08002655 	.word	0x08002655
 800226c:	08002655 	.word	0x08002655
 8002270:	08002295 	.word	0x08002295
 8002274:	08002655 	.word	0x08002655
 8002278:	08002655 	.word	0x08002655
 800227c:	08002655 	.word	0x08002655
 8002280:	08002485 	.word	0x08002485
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002284:	4bb9      	ldr	r3, [pc, #740]	; (800256c <HAL_RCC_GetSysClockFreq+0x358>)
 8002286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800228a:	e1e7      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800228c:	4bb8      	ldr	r3, [pc, #736]	; (8002570 <HAL_RCC_GetSysClockFreq+0x35c>)
 800228e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002292:	e1e3      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	4bb4      	ldr	r3, [pc, #720]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800229c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a0:	4bb1      	ldr	r3, [pc, #708]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d071      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ac:	4bae      	ldr	r3, [pc, #696]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80022bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022d2:	4622      	mov	r2, r4
 80022d4:	462b      	mov	r3, r5
 80022d6:	f04f 0000 	mov.w	r0, #0
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	0159      	lsls	r1, r3, #5
 80022e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e4:	0150      	lsls	r0, r2, #5
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4621      	mov	r1, r4
 80022ec:	1a51      	subs	r1, r2, r1
 80022ee:	6439      	str	r1, [r7, #64]	; 0x40
 80022f0:	4629      	mov	r1, r5
 80022f2:	eb63 0301 	sbc.w	r3, r3, r1
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002304:	4649      	mov	r1, r9
 8002306:	018b      	lsls	r3, r1, #6
 8002308:	4641      	mov	r1, r8
 800230a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230e:	4641      	mov	r1, r8
 8002310:	018a      	lsls	r2, r1, #6
 8002312:	4641      	mov	r1, r8
 8002314:	1a51      	subs	r1, r2, r1
 8002316:	63b9      	str	r1, [r7, #56]	; 0x38
 8002318:	4649      	mov	r1, r9
 800231a:	eb63 0301 	sbc.w	r3, r3, r1
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800232c:	4649      	mov	r1, r9
 800232e:	00cb      	lsls	r3, r1, #3
 8002330:	4641      	mov	r1, r8
 8002332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002336:	4641      	mov	r1, r8
 8002338:	00ca      	lsls	r2, r1, #3
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	4603      	mov	r3, r0
 8002340:	4622      	mov	r2, r4
 8002342:	189b      	adds	r3, r3, r2
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	462b      	mov	r3, r5
 8002348:	460a      	mov	r2, r1
 800234a:	eb42 0303 	adc.w	r3, r2, r3
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800235c:	4629      	mov	r1, r5
 800235e:	024b      	lsls	r3, r1, #9
 8002360:	4621      	mov	r1, r4
 8002362:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002366:	4621      	mov	r1, r4
 8002368:	024a      	lsls	r2, r1, #9
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800237c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002380:	f7fd ff40 	bl	8000204 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800238e:	e067      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002390:	4b75      	ldr	r3, [pc, #468]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	2200      	movs	r2, #0
 8002398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800239c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80023a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023aa:	2300      	movs	r3, #0
 80023ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023b2:	4622      	mov	r2, r4
 80023b4:	462b      	mov	r3, r5
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4621      	mov	r1, r4
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80023e4:	4649      	mov	r1, r9
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4641      	mov	r1, r8
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4641      	mov	r1, r8
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4641      	mov	r1, r8
 80023f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f8:	4649      	mov	r1, r9
 80023fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800240a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800240e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002412:	4692      	mov	sl, r2
 8002414:	469b      	mov	fp, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb1a 0303 	adds.w	r3, sl, r3
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	462b      	mov	r3, r5
 8002420:	eb4b 0303 	adc.w	r3, fp, r3
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002432:	4629      	mov	r1, r5
 8002434:	028b      	lsls	r3, r1, #10
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800243c:	4621      	mov	r1, r4
 800243e:	028a      	lsls	r2, r1, #10
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002448:	2200      	movs	r2, #0
 800244a:	673b      	str	r3, [r7, #112]	; 0x70
 800244c:	677a      	str	r2, [r7, #116]	; 0x74
 800244e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002452:	f7fd fed7 	bl	8000204 <__aeabi_uldivmod>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4613      	mov	r3, r2
 800245c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002482:	e0eb      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002484:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002490:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d06b      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_RCC_GetSysClockFreq+0x354>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	2200      	movs	r2, #0
 80024a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	663b      	str	r3, [r7, #96]	; 0x60
 80024b0:	2300      	movs	r3, #0
 80024b2:	667b      	str	r3, [r7, #100]	; 0x64
 80024b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024b8:	4622      	mov	r2, r4
 80024ba:	462b      	mov	r3, r5
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0159      	lsls	r1, r3, #5
 80024c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ca:	0150      	lsls	r0, r2, #5
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4621      	mov	r1, r4
 80024d2:	1a51      	subs	r1, r2, r1
 80024d4:	61b9      	str	r1, [r7, #24]
 80024d6:	4629      	mov	r1, r5
 80024d8:	eb63 0301 	sbc.w	r3, r3, r1
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024ea:	4659      	mov	r1, fp
 80024ec:	018b      	lsls	r3, r1, #6
 80024ee:	4651      	mov	r1, sl
 80024f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f4:	4651      	mov	r1, sl
 80024f6:	018a      	lsls	r2, r1, #6
 80024f8:	4651      	mov	r1, sl
 80024fa:	ebb2 0801 	subs.w	r8, r2, r1
 80024fe:	4659      	mov	r1, fp
 8002500:	eb63 0901 	sbc.w	r9, r3, r1
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002510:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002514:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002518:	4690      	mov	r8, r2
 800251a:	4699      	mov	r9, r3
 800251c:	4623      	mov	r3, r4
 800251e:	eb18 0303 	adds.w	r3, r8, r3
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	462b      	mov	r3, r5
 8002526:	eb49 0303 	adc.w	r3, r9, r3
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002538:	4629      	mov	r1, r5
 800253a:	024b      	lsls	r3, r1, #9
 800253c:	4621      	mov	r1, r4
 800253e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002542:	4621      	mov	r1, r4
 8002544:	024a      	lsls	r2, r1, #9
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800254e:	2200      	movs	r2, #0
 8002550:	65bb      	str	r3, [r7, #88]	; 0x58
 8002552:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002554:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002558:	f7fd fe54 	bl	8000204 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002566:	e065      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x420>
 8002568:	40023800 	.word	0x40023800
 800256c:	00f42400 	.word	0x00f42400
 8002570:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002574:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_GetSysClockFreq+0x458>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	2200      	movs	r2, #0
 800257c:	4618      	mov	r0, r3
 800257e:	4611      	mov	r1, r2
 8002580:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002584:	653b      	str	r3, [r7, #80]	; 0x50
 8002586:	2300      	movs	r3, #0
 8002588:	657b      	str	r3, [r7, #84]	; 0x54
 800258a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800258e:	4642      	mov	r2, r8
 8002590:	464b      	mov	r3, r9
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	0159      	lsls	r1, r3, #5
 800259c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a0:	0150      	lsls	r0, r2, #5
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4641      	mov	r1, r8
 80025a8:	1a51      	subs	r1, r2, r1
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4649      	mov	r1, r9
 80025ae:	eb63 0301 	sbc.w	r3, r3, r1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025c0:	4659      	mov	r1, fp
 80025c2:	018b      	lsls	r3, r1, #6
 80025c4:	4651      	mov	r1, sl
 80025c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ca:	4651      	mov	r1, sl
 80025cc:	018a      	lsls	r2, r1, #6
 80025ce:	4651      	mov	r1, sl
 80025d0:	1a54      	subs	r4, r2, r1
 80025d2:	4659      	mov	r1, fp
 80025d4:	eb63 0501 	sbc.w	r5, r3, r1
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	00eb      	lsls	r3, r5, #3
 80025e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e6:	00e2      	lsls	r2, r4, #3
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
 80025ec:	4643      	mov	r3, r8
 80025ee:	18e3      	adds	r3, r4, r3
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	464b      	mov	r3, r9
 80025f4:	eb45 0303 	adc.w	r3, r5, r3
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002606:	4629      	mov	r1, r5
 8002608:	028b      	lsls	r3, r1, #10
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002610:	4621      	mov	r1, r4
 8002612:	028a      	lsls	r2, r1, #10
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800261c:	2200      	movs	r2, #0
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002620:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002622:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002626:	f7fd fded 	bl	8000204 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4613      	mov	r3, r2
 8002630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_GetSysClockFreq+0x458>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0f1b      	lsrs	r3, r3, #28
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002652:	e003      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800265a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002660:	4618      	mov	r0, r3
 8002662:	37b8      	adds	r7, #184	; 0xb8
 8002664:	46bd      	mov	sp, r7
 8002666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	00f42400 	.word	0x00f42400

08002674 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e28d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8083 	beq.w	800279a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b04      	cmp	r3, #4
 800269e:	d019      	beq.n	80026d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026a0:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026ac:	4b8e      	ldr	r3, [pc, #568]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b8:	d00c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d112      	bne.n	80026ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d2:	d10b      	bne.n	80026ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05b      	beq.n	8002798 <HAL_RCC_OscConfig+0x124>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d157      	bne.n	8002798 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e25a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x90>
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7b      	ldr	r2, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xcc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0xb4>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xcc>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fab4 	bl	8000cb4 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fab0 	bl	8000cb4 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e21f      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xdc>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe faa0 	bl	8000cb4 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe fa9c 	bl	8000cb4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e20b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x104>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d06f      	beq.n	8002886 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027a6:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d017      	beq.n	80027e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x186>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1d3      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x278>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fa49 	bl	8000cb4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7fe fa45 	bl	8000cb4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1b4      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4925      	ldr	r1, [pc, #148]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x278>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fa28 	bl	8000cb4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7fe fa24 	bl	8000cb4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e193      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fa08 	bl	8000cb4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fa04 	bl	8000cb4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e173      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x274>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x234>
 80028c6:	e01b      	b.n	8002900 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7fe f9f1 	bl	8000cb4 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e00e      	b.n	80028f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe f9ed 	bl	8000cb4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d907      	bls.n	80028f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e15c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470000 	.word	0x42470000
 80028f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b8a      	ldr	r3, [pc, #552]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ea      	bne.n	80028d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8097 	beq.w	8002a3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b83      	ldr	r3, [pc, #524]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b7c      	ldr	r3, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe f9ad 	bl	8000cb4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe f9a9 	bl	8000cb4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e118      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_RCC_OscConfig+0x4b0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x31e>
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x358>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x340>
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x358>
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a59      	ldr	r2, [pc, #356]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe f96e 	bl	8000cb4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe f96a 	bl	8000cb4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0d7      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ee      	beq.n	80029dc <HAL_RCC_OscConfig+0x368>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe f958 	bl	8000cb4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe f954 	bl	8000cb4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0c1      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80ad 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d060      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d145      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x4b4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe f928 	bl	8000cb4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe f924 	bl	8000cb4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e093      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	071b      	lsls	r3, r3, #28
 8002ab2:	491b      	ldr	r1, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x4b4>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe f8f9 	bl	8000cb4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe f8f5 	bl	8000cb4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e064      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x452>
 8002ae4:	e05c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x4b4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f8e2 	bl	8000cb4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe f8de 	bl	8000cb4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x480>
 8002b12:	e045      	b.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e040      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_RCC_OscConfig+0x538>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d030      	beq.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d129      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d122      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d119      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10f      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e03f      	b.n	8002c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd ff44 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f929 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08a      	sub	sp, #40	; 0x28
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d17c      	bne.n	8002d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_UART_Transmit+0x2c>
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e075      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_UART_Transmit+0x3e>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e06e      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe f809 	bl	8000cb4 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	d108      	bne.n	8002ccc <HAL_UART_Transmit+0x82>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d104      	bne.n	8002ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	e003      	b.n	8002cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cdc:	e02a      	b.n	8002d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f840 	bl	8002d6e <UART_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e036      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3302      	adds	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e007      	b.n	8002d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	3301      	adds	r3, #1
 8002d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1cf      	bne.n	8002cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2140      	movs	r1, #64	; 0x40
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f810 	bl	8002d6e <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b090      	sub	sp, #64	; 0x40
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	e050      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d04c      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8e:	f7fd ff91 	bl	8000cb4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d241      	bcs.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dbe:	637a      	str	r2, [r7, #52]	; 0x34
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e5      	bne.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3314      	adds	r3, #20
 8002df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002df2:	623a      	str	r2, [r7, #32]
 8002df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e00f      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d09f      	beq.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3740      	adds	r7, #64	; 0x40
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e50:	b0c0      	sub	sp, #256	; 0x100
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	68d9      	ldr	r1, [r3, #12]
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	ea40 0301 	orr.w	r3, r0, r1
 8002e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ea4:	f021 010c 	bic.w	r1, r1, #12
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	6999      	ldr	r1, [r3, #24]
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	ea40 0301 	orr.w	r3, r0, r1
 8002ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <UART_SetConfig+0x2cc>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d005      	beq.n	8002eec <UART_SetConfig+0xa0>
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	; (800311c <UART_SetConfig+0x2d0>)
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d104      	bne.n	8002ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eec:	f7ff f97e 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 8002ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ef4:	e003      	b.n	8002efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef6:	f7ff f965 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8002efa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	f040 810c 	bne.w	8003124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f26:	415b      	adcs	r3, r3
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f2e:	4621      	mov	r1, r4
 8002f30:	eb12 0801 	adds.w	r8, r2, r1
 8002f34:	4629      	mov	r1, r5
 8002f36:	eb43 0901 	adc.w	r9, r3, r1
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	eb18 0303 	adds.w	r3, r8, r3
 8002f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	eb49 0303 	adc.w	r3, r9, r3
 8002f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	18db      	adds	r3, r3, r3
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f80:	4613      	mov	r3, r2
 8002f82:	eb42 0303 	adc.w	r3, r2, r3
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54
 8002f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f90:	f7fd f938 	bl	8000204 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <UART_SetConfig+0x2d4>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	011c      	lsls	r4, r3, #4
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe4:	4692      	mov	sl, r2
 8002fe6:	469b      	mov	fp, r3
 8002fe8:	4643      	mov	r3, r8
 8002fea:	eb1a 0303 	adds.w	r3, sl, r3
 8002fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800300c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003010:	460b      	mov	r3, r1
 8003012:	18db      	adds	r3, r3, r3
 8003014:	643b      	str	r3, [r7, #64]	; 0x40
 8003016:	4613      	mov	r3, r2
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
 800301e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003026:	f7fd f8ed 	bl	8000204 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4611      	mov	r1, r2
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2301 	umull	r2, r3, r3, r1
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	1acb      	subs	r3, r1, r3
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <UART_SetConfig+0x2d4>)
 8003048:	fba3 2302 	umull	r2, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003054:	441c      	add	r4, r3
 8003056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	1891      	adds	r1, r2, r2
 800306e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003070:	415b      	adcs	r3, r3
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003078:	4641      	mov	r1, r8
 800307a:	1851      	adds	r1, r2, r1
 800307c:	6339      	str	r1, [r7, #48]	; 0x30
 800307e:	4649      	mov	r1, r9
 8003080:	414b      	adcs	r3, r1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003090:	4659      	mov	r1, fp
 8003092:	00cb      	lsls	r3, r1, #3
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309a:	4651      	mov	r1, sl
 800309c:	00ca      	lsls	r2, r1, #3
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	4642      	mov	r2, r8
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030cc:	460b      	mov	r3, r1
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d2:	4613      	mov	r3, r2
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030e2:	f7fd f88f 	bl	8000204 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <UART_SetConfig+0x2d4>)
 80030ec:	fba3 1302 	umull	r1, r3, r3, r2
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	2164      	movs	r1, #100	; 0x64
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	3332      	adds	r3, #50	; 0x32
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <UART_SetConfig+0x2d4>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	f003 0207 	and.w	r2, r3, #7
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4422      	add	r2, r4
 8003112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003114:	e105      	b.n	8003322 <UART_SetConfig+0x4d6>
 8003116:	bf00      	nop
 8003118:	40011000 	.word	0x40011000
 800311c:	40011400 	.word	0x40011400
 8003120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800312e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003136:	4642      	mov	r2, r8
 8003138:	464b      	mov	r3, r9
 800313a:	1891      	adds	r1, r2, r2
 800313c:	6239      	str	r1, [r7, #32]
 800313e:	415b      	adcs	r3, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003146:	4641      	mov	r1, r8
 8003148:	1854      	adds	r4, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb43 0501 	adc.w	r5, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	00eb      	lsls	r3, r5, #3
 800315a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315e:	00e2      	lsls	r2, r4, #3
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	4643      	mov	r3, r8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800316c:	464b      	mov	r3, r9
 800316e:	eb45 0303 	adc.w	r3, r5, r3
 8003172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003192:	4629      	mov	r1, r5
 8003194:	008b      	lsls	r3, r1, #2
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319c:	4621      	mov	r1, r4
 800319e:	008a      	lsls	r2, r1, #2
 80031a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031a4:	f7fd f82e 	bl	8000204 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4b60      	ldr	r3, [pc, #384]	; (8003330 <UART_SetConfig+0x4e4>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	011c      	lsls	r4, r3, #4
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	61b9      	str	r1, [r7, #24]
 80031d0:	415b      	adcs	r3, r3
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6139      	str	r1, [r7, #16]
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	67bb      	str	r3, [r7, #120]	; 0x78
 8003222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003230:	4649      	mov	r1, r9
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	4641      	mov	r1, r8
 8003236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323a:	4641      	mov	r1, r8
 800323c:	008a      	lsls	r2, r1, #2
 800323e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003242:	f7fc ffdf 	bl	8000204 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b39      	ldr	r3, [pc, #228]	; (8003330 <UART_SetConfig+0x4e4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <UART_SetConfig+0x4e4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326a:	441c      	add	r4, r3
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003270:	2200      	movs	r2, #0
 8003272:	673b      	str	r3, [r7, #112]	; 0x70
 8003274:	677a      	str	r2, [r7, #116]	; 0x74
 8003276:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800327a:	4642      	mov	r2, r8
 800327c:	464b      	mov	r3, r9
 800327e:	1891      	adds	r1, r2, r2
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	415b      	adcs	r3, r3
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800328a:	4641      	mov	r1, r8
 800328c:	1851      	adds	r1, r2, r1
 800328e:	6039      	str	r1, [r7, #0]
 8003290:	4649      	mov	r1, r9
 8003292:	414b      	adcs	r3, r1
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a2:	4659      	mov	r1, fp
 80032a4:	00cb      	lsls	r3, r1, #3
 80032a6:	4651      	mov	r1, sl
 80032a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ac:	4651      	mov	r1, sl
 80032ae:	00ca      	lsls	r2, r1, #3
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	4603      	mov	r3, r0
 80032b6:	4642      	mov	r2, r8
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80032bc:	464b      	mov	r3, r9
 80032be:	460a      	mov	r2, r1
 80032c0:	eb42 0303 	adc.w	r3, r2, r3
 80032c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	663b      	str	r3, [r7, #96]	; 0x60
 80032d0:	667a      	str	r2, [r7, #100]	; 0x64
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032de:	4649      	mov	r1, r9
 80032e0:	008b      	lsls	r3, r1, #2
 80032e2:	4641      	mov	r1, r8
 80032e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e8:	4641      	mov	r1, r8
 80032ea:	008a      	lsls	r2, r1, #2
 80032ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032f0:	f7fc ff88 	bl	8000204 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <UART_SetConfig+0x4e4>)
 80032fa:	fba3 1302 	umull	r1, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2164      	movs	r1, #100	; 0x64
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <UART_SetConfig+0x4e4>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4422      	add	r2, r4
 8003320:	609a      	str	r2, [r3, #8]
}
 8003322:	bf00      	nop
 8003324:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332e:	bf00      	nop
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4d0d      	ldr	r5, [pc, #52]	; (800336c <__libc_init_array+0x38>)
 8003338:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	2600      	movs	r6, #0
 8003340:	42a6      	cmp	r6, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	4d0b      	ldr	r5, [pc, #44]	; (8003374 <__libc_init_array+0x40>)
 8003346:	4c0c      	ldr	r4, [pc, #48]	; (8003378 <__libc_init_array+0x44>)
 8003348:	f000 f820 	bl	800338c <_init>
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	2600      	movs	r6, #0
 8003352:	42a6      	cmp	r6, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f855 3b04 	ldr.w	r3, [r5], #4
 800335c:	4798      	blx	r3
 800335e:	3601      	adds	r6, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f855 3b04 	ldr.w	r3, [r5], #4
 8003366:	4798      	blx	r3
 8003368:	3601      	adds	r6, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	08003400 	.word	0x08003400
 8003370:	08003400 	.word	0x08003400
 8003374:	08003400 	.word	0x08003400
 8003378:	08003404 	.word	0x08003404

0800337c <memset>:
 800337c:	4402      	add	r2, r0
 800337e:	4603      	mov	r3, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <_init>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

08003398 <_fini>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr
